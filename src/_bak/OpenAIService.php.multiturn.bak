<?php

namespace Drupal\openai_integration;

use GuzzleHttp\Client;
use Drupal\Core\Session\SessionManagerInterface;
use Drupal\Core\Session\AccountProxyInterface;

class OpenAIService {

  protected $sessionManager;
  protected $currentUser;

  // Constructor to inject dependencies
  public function __construct(SessionManagerInterface $session_manager, AccountProxyInterface $current_user) {
    $this->sessionManager = $session_manager;
    $this->currentUser = $current_user;
    $this->sessionManager->start();
  }

  // Function to generate response, considering past messages
  public static function generateResponse($prompt) {
    $client = new Client();
    
    // Start session to store conversation log
    if (!isset($_SESSION['openai_conversation'])) {
      $_SESSION['openai_conversation'] = [];
    }

    // Push new prompt to the conversation array
    array_push($_SESSION['openai_conversation'], ["role" => "user", "content" => $prompt]);

    // Make the POST request including all past conversation messages
    $response = $client->request('POST', 'https://api.openai.com/v1/chat/completions', [
      'headers' => [
        'Authorization' => 'Bearer ' . getenv('OPENAI_API_KEY'),
        'Content-Type' => 'application/json',
      ],
      'json' => [
        'model' => 'gpt-3.5-turbo',
        'messages' => $_SESSION['openai_conversation'],
      ],
    ]);

    $body = $response->getBody();
    $data = json_decode($body, true);

    // Update session with assistant's reply
    array_push($_SESSION['openai_conversation'], ["role" => "assistant", "content" => $data['choices'][0]['message']['content']]);

    // Return only the latest response
    return $data['choices'][0]['message']['content'];
  }
}
